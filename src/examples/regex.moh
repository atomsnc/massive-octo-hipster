
%type<c> CHAR 'n' 'r' 'f' '.' '*' '+' '[' ']' '(' ')' 'N' 'b' 'B'
    'd' 'D' 's' 'S' 'w' 'W' 'Q' 'U' 'L' '0' '1' '2' '3' '4' '5'
    '6' '7' '8' '9' ;

%type<i> digit number octal_digit octal_number ;
%type<re> alternatives sequence basic_re repetition atom
    group any sol eol char set positive_set negative_set set_items
    set_item range metachar tangible_metachar nontangible_metachar ;

%union {
    re_t *re;
    u_char c;
    int i;
}

%prefix rgx ;

regex 
    : alternatives
    ;

alternatives
    : sequence
    | alternatives '|' sequence { $$ = new_alternative(pool, $1, $3); }
    ;

sequence
    : basic_re
    | sequence basic_re { $$ = new_sequence(pool, $1, $2); }
    ;

basic_re
    : atom
    | repetition
    ;

repetition
    : atom '*' { $$ = new_repetition(pool, $1, 0, BOO_INFINITY); }
    | atom '+' { $$ = new_repetition(pool, $1, 1, BOO_INFINITY); }
    | atom '?' { $$ = new_repetition(pool, $1, 0, 1); }
    | atom '{' number '}' { $$ = new_repetition(pool, $1, $3, $3); }
    | atom '{' number ',' '}' { $$ = new_repetition(pool, $1, $3, BOO_INFINITY); }
    | atom '{' ',' number '}' { $$ = new_repetition(pool, $1, 0, $4); }
    | atom '{' number ',' number '}' { $$ = new_repetition(pool, $1, $3, $5); }
    ;

atom
    : group
    | any
    | sol
    | eol
    | char
    | set
    ;

group
    : '(' alternatives ')' { $$ = $2; }
    ;

any
    : '.' { $$ = new_any(pool); }
    ;

sol
    : '^' { $$ = new_sol(pool); }
    ;

eol
    : '$' { $$ = new_eol(pool); }
    ;

set
    : positive_set
    | negative_set
    ;

positive_set
    : '[' set_items ']' { $$ = $2; }
    ;

negative_set
    : '[' '^' set_items ']' { $$ = $3; }
    ;
    
set_items
    : set_item { re_t *set = new_set(pool); add_member(pool, set, $1); $$ = set; }
    | set_items set_item { add_member(pool, $1, $2); $$ = $1; }
    ;

set_item
    : range
    | char
    ;

range
    : CHAR '-' CHAR { $$ = new_range(pool, $1, $3); }
    ;

char
    : '\' metachar { $$ = $2; }
    | '\' octal_number { $$ = new_char(pool, $2); }
    | CHAR { $$ = new_char(pool, $1); }
    ;

metachar
    : tangible_metachar
    | nontangible_metachar 
    ;

tangible_metachar
    : 't' { $$ = new_char(pool, '\t'); }
    | 'n' { $$ = new_char(pool, '\n'); }
    | 'r' { $$ = new_char(pool, '\r'); }
    | 'f' { $$ = new_char(pool, '\f'); }
    | '.' { $$ = new_char(pool, '.'); }
    | '*' { $$ = new_char(pool, '*'); }
    | '+' { $$ = new_char(pool, '+'); }
    | '[' { $$ = new_char(pool, '['); }
    | ']' { $$ = new_char(pool, ']'); }
    | '(' { $$ = new_char(pool, '('); }
    | ')' { $$ = new_char(pool, ')'); }
    ; 

nontangible_metachar
    : 'd' { $$ = new_set(pool); add_digit($$); }
    | 'D' { $$ = new_set(pool); add_digit($$); invert_set($$); }
    | 's' { $$ = new_set(pool); add_whitespace($$); }
    | 'S' { $$ = new_set(pool); add_whitespace($$); invert_set($$); }
    | 'w' { $$ = new_set(pool); add_word_character($$); }
    | 'W' { $$ = new_set(pool); add_word_character($$); invert_set($$); }
    ;

number
    : digit
    | number digit { $$ *= 10; $$ += $2; }
    ;

digit
    : '0' { $$ = 0; }
    | '1' { $$ = 1; }
    | '2' { $$ = 2; }
    | '3' { $$ = 3; }
    | '4' { $$ = 4; }
    | '5' { $$ = 5; }
    | '6' { $$ = 6; }
    | '7' { $$ = 7; }
    | '8' { $$ = 8; }
    | '9' { $$ = 9; }
    ;

octal_number
    : octal_digit
    | octal_number octal_digit { $$ *= 8; $$ += $2; }
    ;

octal_digit
    : '0' { $$ = 0; }
    | '1' { $$ = 1; }
    | '2' { $$ = 2; }
    | '3' { $$ = 3; }
    | '4' { $$ = 4; }
    | '5' { $$ = 5; }
    | '6' { $$ = 6; }
    | '7' { $$ = 7; }
    ;

